#include <iostream>
#include <gtest/gtest.h>

#include <rosacxx/filters.h>
#include <rosacxx/core/pitch.h>
#include <rosacxx/core/convert.h>

class ROSACXXTest : public testing::Test {
protected:
    virtual void TearDown() override { }
    virtual void SetUp() override { }
};

TEST_F(ROSACXXTest, midi_to_hz) {
    std::vector<double> gt = {
        8.35482560e+00, 8.85162938e+00, 9.37797466e+00, 9.93561805e+00,
        1.05264206e+01, 1.11523542e+01, 1.18155077e+01, 1.25180943e+01,
        1.32624589e+01, 1.40510858e+01, 1.48866068e+01, 1.57718105e+01,
        1.67096512e+01, 1.77032588e+01, 1.87559493e+01, 1.98712361e+01,
        2.10528413e+01, 2.23047084e+01, 2.36310153e+01, 2.50361886e+01,
        2.65249179e+01, 2.81021716e+01, 2.97732137e+01, 3.15436211e+01,
        3.34193024e+01, 3.54065175e+01, 3.75118986e+01, 3.97424722e+01,
        4.21056826e+01, 4.46094167e+01, 4.72620307e+01, 5.00723773e+01,
        5.30498358e+01, 5.62043432e+01, 5.95464273e+01, 6.30872422e+01,
        6.68386048e+01, 7.08130351e+01, 7.50237972e+01, 7.94849444e+01,
        8.42113651e+01, 8.92188335e+01, 9.45240614e+01, 1.00144755e+02,
        1.06099672e+02, 1.12408686e+02, 1.19092855e+02, 1.26174484e+02,
        1.33677210e+02, 1.41626070e+02, 1.50047594e+02, 1.58969889e+02,
        1.68422730e+02, 1.78437667e+02, 1.89048123e+02, 2.00289509e+02,
        2.12199343e+02, 2.24817373e+02, 2.38185709e+02, 2.52348969e+02,
        2.67354419e+02, 2.83252140e+02, 3.00095189e+02, 3.17939778e+02,
        3.36845461e+02, 3.56875334e+02, 3.78096246e+02, 4.00579018e+02,
        4.24398686e+02, 4.49634745e+02, 4.76371419e+02, 5.04697937e+02,
        5.34708838e+02, 5.66504281e+02, 6.00190378e+02, 6.35879555e+02,
        6.73690921e+02, 7.13750668e+02, 7.56192491e+02, 8.01158037e+02,
        8.48797373e+02, 8.99269491e+02, 9.52742837e+02, 1.00939587e+03,
        1.06941768e+03, 1.13300856e+03, 1.20038076e+03, 1.27175911e+03,
        1.34738184e+03, 1.42750134e+03, 1.51238498e+03, 1.60231607e+03,
        1.69759475e+03, 1.79853898e+03, 1.90548567e+03, 2.01879175e+03,
        2.13883535e+03, 2.26601712e+03, 2.40076151e+03, 2.54351822e+03,
        2.69476368e+03, 2.85500267e+03, 3.02476996e+03, 3.20463215e+03,
        3.39518949e+03, 3.59707796e+03, 3.81097135e+03, 4.03758350e+03,
        4.27767071e+03, 4.53203424e+03, 4.80152302e+03, 5.08703644e+03,
        5.38952737e+03, 5.71000534e+03, 6.04953993e+03, 6.40926429e+03,
        6.79037898e+03, 7.19415593e+03, 7.62194270e+03, 8.07516700e+03,
        8.55534141e+03, 9.06406849e+03, 9.60304605e+03, 1.01740729e+04,
        1.07790547e+04, 1.14200107e+04, 1.20990799e+04, 1.28185286e+04
    };
    auto midi = rosacxx::core::midi_to_hz(nc::arange(128).astype<float>() + 0.375f);
    for (auto i = 0; i < midi.elemCount(); i++) {
        EXPECT_LE(std::abs((midi.getitem(i)-gt[i])/gt[i]), 1e-6);
    }
}

TEST_F(ROSACXXTest, pitch_tuning) {
    const std::vector<float> vec_resolution = { 1e-2, 1e-3 };
    const std::vector<float> vec_tuning = { -0.5, -0.375, -0.25, 0.0, 0.25, 0.375 };
    const std::vector<int  > vec_bins_per_octave = { 12, };
    for (auto resolution : vec_resolution) {
        for (auto tuning : vec_tuning) {
            for (auto bins_per_octave : vec_bins_per_octave) {
                auto hz = rosacxx::core::midi_to_hz(nc::arange(128).astype<float>()+tuning);
                auto est_tuning = rosacxx::core::pitch_tuning(hz, resolution, bins_per_octave);
                EXPECT_LE(std::abs(tuning - est_tuning), resolution);
            }
        }
    }
}

TEST_F(ROSACXXTest, get_window) {
    using namespace rosacxx::filters;
    {   // STFTWindowType::Rectangular
        auto w = get_window(STFTWindowType::Rectangular, 64, true);
        for (auto i = 0; i < w.elemCount(); i++) {
            EXPECT_EQ(w.getitem(i), 1);
        }
    }
    {   // STFTWindowType::Bartlett
        std::vector<float> w_gt = {
            0.        , 0.03174603, 0.06349206, 0.0952381 , 0.12698413,
            0.15873016, 0.19047619, 0.22222222, 0.25396825, 0.28571429,
            0.31746032, 0.34920635, 0.38095238, 0.41269841, 0.44444444,
            0.47619048, 0.50793651, 0.53968254, 0.57142857, 0.6031746 ,
            0.63492063, 0.66666667, 0.6984127 , 0.73015873, 0.76190476,
            0.79365079, 0.82539683, 0.85714286, 0.88888889, 0.92063492,
            0.95238095, 0.98412698, 0.98412698, 0.95238095, 0.92063492,
            0.88888889, 0.85714286, 0.82539683, 0.79365079, 0.76190476,
            0.73015873, 0.6984127 , 0.66666667, 0.63492063, 0.6031746 ,
            0.57142857, 0.53968254, 0.50793651, 0.47619048, 0.44444444,
            0.41269841, 0.38095238, 0.34920635, 0.31746032, 0.28571429,
            0.25396825, 0.22222222, 0.19047619, 0.15873016, 0.12698413,
            0.0952381 , 0.06349206, 0.03174603, 0.
        };
        auto w = get_window(STFTWindowType::Bartlett, 64, true);
        for (auto i = 0; i < w.elemCount(); i++) {
            EXPECT_NEAR(w.getitem(i), w_gt[i], 1e-6);
        }
    }
    {   // STFTWindowType::Hamming
        std::vector<float> w_gt = {
            0.08      , 0.08228584, 0.08912066, 0.10043651, 0.11612094,
            0.13601808, 0.15993016, 0.18761956, 0.21881106, 0.25319469,
            0.29042872, 0.3301431 , 0.37194313, 0.41541338, 0.46012184,
            0.50562416, 0.55146812, 0.5971981 , 0.64235963, 0.68650386,
            0.72919207, 0.77      , 0.80852209, 0.84437549, 0.87720386,
            0.90668095, 0.93251381, 0.95444568, 0.97225861, 0.98577555,
            0.99486218, 0.99942818, 0.99942818, 0.99486218, 0.98577555,
            0.97225861, 0.95444568, 0.93251381, 0.90668095, 0.87720386,
            0.84437549, 0.80852209, 0.77      , 0.72919207, 0.68650386,
            0.64235963, 0.5971981 , 0.55146812, 0.50562416, 0.46012184,
            0.41541338, 0.37194313, 0.3301431 , 0.29042872, 0.25319469,
            0.21881106, 0.18761956, 0.15993016, 0.13601808, 0.11612094,
            0.10043651, 0.08912066, 0.08228584, 0.08
        };
        auto w = get_window(STFTWindowType::Hamming, 64, true);
        for (auto i = 0; i < w.elemCount(); i++) {
            EXPECT_NEAR(w.getitem(i), w_gt[i], 1e-6);
        }
    }
    {   // STFTWindowType::Hanning
        std::vector<float> w_gt = {
            0.        , 0.00248461, 0.00991376, 0.0222136 , 0.03926189,
            0.06088921, 0.08688061, 0.11697778, 0.15088159, 0.1882551 ,
            0.22872687, 0.27189467, 0.31732949, 0.36457977, 0.41317591,
            0.46263495, 0.51246535, 0.56217185, 0.61126047, 0.65924333,
            0.70564355, 0.75      , 0.79187184, 0.83084292, 0.86652594,
            0.89856625, 0.92664544, 0.95048443, 0.96984631, 0.98453864,
            0.99441541, 0.99937846, 0.99937846, 0.99441541, 0.98453864,
            0.96984631, 0.95048443, 0.92664544, 0.89856625, 0.86652594,
            0.83084292, 0.79187184, 0.75      , 0.70564355, 0.65924333,
            0.61126047, 0.56217185, 0.51246535, 0.46263495, 0.41317591,
            0.36457977, 0.31732949, 0.27189467, 0.22872687, 0.1882551 ,
            0.15088159, 0.11697778, 0.08688061, 0.06088921, 0.03926189,
            0.0222136 , 0.00991376, 0.00248461, 0.
        };
        auto w = get_window(STFTWindowType::Hanning, 64, true);
        for (auto i = 0; i < w.elemCount(); i++) {
            EXPECT_NEAR(w.getitem(i), w_gt[i], 1e-6);
        }
    }
    {   // STFTWindowType::Blackman
        std::vector<float> w_gt = {
            -1.38777878e-17,  8.98411345e-04,  3.63185303e-03,  8.31269905e-03,
            1.51208395e-02,  2.42929144e-02,  3.61078948e-02,  5.08696327e-02,
            6.88871356e-02,  9.04534244e-02,  1.15823900e-01,  1.45195178e-01,
            1.78685338e-01,  2.16316495e-01,  2.58000502e-01,  3.03528487e-01,
            3.52564792e-01,  4.04645669e-01,  4.59182958e-01,  5.15472725e-01,
            5.72708685e-01,  6.30000000e-01,  6.86392904e-01,  7.40895422e-01,
            7.92504343e-01,  8.40233491e-01,  8.83142293e-01,  9.20363618e-01,
            9.51129866e-01,  9.74796369e-01,  9.90861238e-01,  9.98980923e-01,
            9.98980923e-01,  9.90861238e-01,  9.74796369e-01,  9.51129866e-01,
            9.20363618e-01,  8.83142293e-01,  8.40233491e-01,  7.92504343e-01,
            7.40895422e-01,  6.86392904e-01,  6.30000000e-01,  5.72708685e-01,
            5.15472725e-01,  4.59182958e-01,  4.04645669e-01,  3.52564792e-01,
            3.03528487e-01,  2.58000502e-01,  2.16316495e-01,  1.78685338e-01,
            1.45195178e-01,  1.15823900e-01,  9.04534244e-02,  6.88871356e-02,
            5.08696327e-02,  3.61078948e-02,  2.42929144e-02,  1.51208395e-02,
            8.31269905e-03,  3.63185303e-03,  8.98411345e-04, -1.38777878e-17
        };
        auto w = get_window(STFTWindowType::Blackman, 64, true);
        for (auto i = 0; i < w.elemCount(); i++) {
            EXPECT_NEAR(w.getitem(i), w_gt[i], 1e-6);
        }
    }
    {   // STFTWindowType::Nuttall
        std::vector<float> w_gt = {
            3.62800000e-04, 5.57958854e-04, 1.18467321e-03, 2.36636992e-03,
            4.30764023e-03, 7.29200426e-03, 1.16777507e-02, 1.78909987e-02,
            2.64151172e-02, 3.77757690e-02, 5.25211101e-02, 7.11970651e-02,
            9.43180717e-02, 1.22334207e-01, 1.55596126e-01, 1.94319691e-01,
            2.38552527e-01, 2.88144939e-01, 3.42727620e-01, 4.01698412e-01,
            4.64219997e-01, 5.29229800e-01, 5.95462707e-01, 6.61486347e-01,
            7.25747858e-01, 7.86630229e-01, 8.42515538e-01, 8.91851861e-01,
            9.33220225e-01, 9.65397810e-01, 9.87413759e-01, 9.98594268e-01,
            9.98594268e-01, 9.87413759e-01, 9.65397810e-01, 9.33220225e-01,
            8.91851861e-01, 8.42515538e-01, 7.86630229e-01, 7.25747858e-01,
            6.61486347e-01, 5.95462707e-01, 5.29229800e-01, 4.64219997e-01,
            4.01698412e-01, 3.42727620e-01, 2.88144939e-01, 2.38552527e-01,
            1.94319691e-01, 1.55596126e-01, 1.22334207e-01, 9.43180717e-02,
            7.11970651e-02, 5.25211101e-02, 3.77757690e-02, 2.64151172e-02,
            1.78909987e-02, 1.16777507e-02, 7.29200426e-03, 4.30764023e-03,
            2.36636992e-03, 1.18467321e-03, 5.57958854e-04, 3.62800000e-04
        };
        auto w = get_window(STFTWindowType::Nuttall, 64, true);
        for (auto i = 0; i < w.elemCount(); i++) {
            EXPECT_NEAR(w.getitem(i), w_gt[i], 1e-6);
        }
    }
    {   // STFTWindowType::BlackmanHarris
        std::vector<float> w_gt = {
            6.00000000e-05, 2.04101408e-04, 6.77266237e-04, 1.60200781e-03,
            3.18209500e-03, 5.70127660e-03, 9.52029332e-03, 1.50711734e-02,
            2.28477818e-02, 3.33917235e-02, 4.72729869e-02, 6.50651362e-02,
            8.73153791e-02, 1.14510418e-01, 1.47039558e-01, 1.85157068e-01,
            2.28946182e-01, 2.78287365e-01, 3.32833504e-01, 3.91994497e-01,
            4.54933314e-01, 5.20575000e-01, 5.87629313e-01, 6.54626830e-01,
            7.19967405e-01, 7.81978990e-01, 8.38983999e-01, 8.89369772e-01,
            9.31659269e-01, 9.64577938e-01, 9.87112847e-01, 9.98560509e-01,
            9.98560509e-01, 9.87112847e-01, 9.64577938e-01, 9.31659269e-01,
            8.89369772e-01, 8.38983999e-01, 7.81978990e-01, 7.19967405e-01,
            6.54626830e-01, 5.87629313e-01, 5.20575000e-01, 4.54933314e-01,
            3.91994497e-01, 3.32833504e-01, 2.78287365e-01, 2.28946182e-01,
            1.85157068e-01, 1.47039558e-01, 1.14510418e-01, 8.73153791e-02,
            6.50651362e-02, 4.72729869e-02, 3.33917235e-02, 2.28477818e-02,
            1.50711734e-02, 9.52029332e-03, 5.70127660e-03, 3.18209500e-03,
            1.60200781e-03, 6.77266237e-04, 2.04101408e-04, 6.00000000e-05
        };
        auto w = get_window(STFTWindowType::BlackmanHarris, 64, true);
        for (auto i = 0; i < w.elemCount(); i++) {
            EXPECT_NEAR(w.getitem(i), w_gt[i], 1e-6);
        }
    }
}

namespace rosa {
namespace tests {

void tests_rosacxx() {
    ::testing::InitGoogleTest();
    ::testing::GTEST_FLAG(filter) = "ROSACXXTest*";
    RUN_ALL_TESTS();
}

} // namespace tests
} // namespace rosa

